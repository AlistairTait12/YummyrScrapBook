{
	"info": {
		"_postman_id": "432e00f1-d36a-4609-9aec-e82b30286833",
		"name": "YummyrApi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19480666"
	},
	"item": [
		{
			"name": "Recipes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const recipeSchema = {\r",
							"  \"description\": \"basic information about a recipe\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": { \"type\": \"number\" },\r",
							"    \"title\": { \"type\": \"string\" },\r",
							"    \"prepMinutes\": { \"type\": \"number\" },\r",
							"    \"cookMinutes\": { \"type\": \"number\" },\r",
							"    \"serves\": { \"type\": \"number\" }\r",
							"  },\r",
							"  \"required\": [\"id\", \"title\"]\r",
							"}\r",
							"\r",
							"pm.test('GetRecipesReturnsStatus200', () => {\r",
							"    // Assert\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('GetRecipesReturnsAnArray', () => {\r",
							"    // Assert\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test('GetRecipesReturnsArrayWhereEachElementMatchesRecipeSchema', () => {\r",
							"    // Assert\r",
							"    pm.response.json().forEach(element => {\r",
							"        pm.expect(element).to.have.jsonSchema(recipeSchema);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:7253/api/recipes/",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7253",
					"path": [
						"api",
						"recipes",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Recipe/id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const recipeSchema = {\r",
							"  \"description\": \"basic information about a recipe\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": { \"type\": \"number\" },\r",
							"    \"title\": { \"type\": \"string\" },\r",
							"    \"prepMinutes\": { \"type\": \"number\" },\r",
							"    \"cookMinutes\": { \"type\": \"number\" },\r",
							"    \"serves\": { \"type\": \"number\" }\r",
							"  },\r",
							"  \"required\": [\"id\", \"title\"]\r",
							"}\r",
							"\r",
							"const ingredientQuantitySchema = {\r",
							"  \"description\": \"a relationship between an ingredient and its quantity in the recipe\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"ingredientQuantity\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": { \"type\": \"number\" },\r",
							"        \"recipeId\": { \"type\": \"number\" },\r",
							"        \"ingredientId\": { \"type\": \"number\" },\r",
							"        \"quantity\": { \"type\": \"number\" },\r",
							"        \"unitOfMeasure\": { \"type\": \"number\" }\r",
							"      },\r",
							"      \"required\": [ \"id\", \"recipeId\", \"ingredientId\", \"quantity\", \"unitOfMeasure\" ]\r",
							"    },\r",
							"    \"ingredient\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": { \"type\": \"number\" },\r",
							"        \"name\": { \"type\": \"string\" }\r",
							"      }\r",
							"    }\r",
							"  }\r",
							"}\r",
							"\r",
							"const recipeStepSchema = {\r",
							"    \"description\": \"an object containing information about a step in a recipe\",\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\": { \"type\": \"number\" },\r",
							"        \"recipeId\": { \"type\": \"number\" },\r",
							"        \"stepOrder\": { \"type\": \"number\" },\r",
							"        \"stepText\": { \"type\": \"string\" }\r",
							"    },\r",
							"    \"required\": [ \"id\", \"recipeId\", \"stepOrder\", \"stepText\" ]\r",
							"}\r",
							"\r",
							"pm.test('GetRecipeReturnsStatus200', () => {\r",
							"    // Assert\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('RecipeInfoInResponseMatchesSchema', () => {\r",
							"    // Arrange\r",
							"    const recipeInfo = pm.response.json().recipe;\r",
							"\r",
							"    // Assert\r",
							"    pm.expect(recipeInfo).to.have.jsonSchema(recipeSchema);\r",
							"});\r",
							"\r",
							"pm.test('IngredientQuantityModelsInResponseIsAnArray', () => {\r",
							"    // Assert\r",
							"    pm.expect(pm.response.json().ingredientQuantityModels).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test('IngredientQuantityModelsInResponseIsAnArrayOfObjectsMatchingIngredientQuantitySchema', () => {\r",
							"    // Assert\r",
							"    pm.response.json().ingredientQuantityModels.forEach((element) => {\r",
							"        pm.expect(element).to.have.jsonSchema(ingredientQuantitySchema);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test('RecipeStepsInResponseIsAnArray', () => {\r",
							"    // Assert\r",
							"    pm.expect(pm.response.json().recipeSteps).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test('RecipeStepsInResponseIsAnArrayOfObjectsEachMatchingRecipeStepSchema', () => {\r",
							"    // Assert\r",
							"    pm.response.json().recipeSteps.forEach((element) => {\r",
							"        pm.expect(element).to.have.jsonSchema(recipeStepSchema);\r",
							"    });\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:7253/api/recipes/5",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7253",
					"path": [
						"api",
						"recipes",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "Ingredients",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const ingredientSchema = {\r",
							"    \"description\": \"A simple model depicting an ingredient and its Id in the database\",\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\": { \"type\": \"number\" },\r",
							"        \"name\": { \"type\": \"string\" }\r",
							"    },\r",
							"    \"required\": [ \"id\", \"name\" ]\r",
							"}\r",
							"\r",
							"pm.test('GetIngredientsHasStatus200', () => {\r",
							"    // Assert\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('GetIngredientsReturnsAnArray', () => {\r",
							"    // Assert\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test('GetIngredientsReturnsAnArrayOfObjectsEachMatchingTheIngredientSchema', () => {\r",
							"    // Assert\r",
							"    pm.response.json().forEach((element) => {\r",
							"        pm.expect(element).to.have.jsonSchema(ingredientSchema);\r",
							"    })\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:7253/api/ingredients",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7253",
					"path": [
						"api",
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "PostIngredient",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"ham\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7253/api/ingredients",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7253",
					"path": [
						"api",
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "PostRecipe",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"recipe\": {\r\n        \"title\": \"A recipe number two\",\r\n        \"prepMinutes\": 5,\r\n        \"cookMinutes\": 10,\r\n        \"serves\": 2\r\n    },\r\n    \"ingredientQuantityModels\": [\r\n        {\r\n            \"ingredientQuantity\": {\r\n                \"quantity\": 5,\r\n                \"unitOfMeasure\": 0\r\n            },\r\n            \"ingredient\": {\r\n                \"name\": \"Cheese\"\r\n            }\r\n        }\r\n    ],\r\n    \"recipeSteps\": [\r\n        {\r\n            \"stepOrder\": 1,\r\n            \"stepText\": \"make it\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7253/api/recipes",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7253",
					"path": [
						"api",
						"recipes"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}